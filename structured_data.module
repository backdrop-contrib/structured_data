<?php
/**
 * @file
 * Annotate your content to generate Rich Search Snippets.
 */

/**
 * Implements hook_permission().
 */
function structured_data_permission() {
  return array(
    'configure structured data' =>  array(
      'title' => t('Configure structured data'),
      'description' => t('Determine which elements should be included in Rich Snippits.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function structured_data_menu() {
  $items['admin/config/structured-data'] = array(
    'title' => 'Structured data',
    'description' => 'The main configuration page for Structured Data',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('structured_data_settings_form'),
    'access arguments' => array('configure structured data'),
    'file' => 'structured_data.admin.inc',
  );

  return $items;
}

/**
 * Implements hook_config_info().
 */
function structured_data_config_info() {
  $prefixes['structured_data.settings'] = array(
    'label' => t('Structured Data'),
    'group' => t('Configuration'),
  );
  return $prefixes;
}

/**
 * Implements template_preprocess_page().
 *
 * Add the necesarry json-ld to the page header.
 */
function structured_data_preprocess_page(&$varaibles) {
  // Can we assume every website is just a website?
  $structured_data = array(
    '@context' => 'http://schema.org',
    '@type' => 'WebSite',
  );

  $config = config('structured_data.settings');

  // Check for Current Node.
  $node = menu_get_object();
  if (!isset($node) && arg(0) == 'node' && is_numeric(arg(1)) && !arg(2)) {
    $node = node_load(arg(1));
  }
  if (isset($node)) {
    // Add node specific info.
    $node_data = structured_data_get_node_info($node);
    $structured_data = array_merge($structured_data, $node_data);
  }
  else {
    // Override type if a business type was selected.
    if ($schema_type = $config->get('business_type', FALSE)) {
      $data['@type'] = $schema_type;
    }

    // Add site name info.
    $structured_data['name'] = structured_data_get_site_name();
    // Get the alternative site name.
    if ($alternative_site_name = $config->get('site_name_alternative', FALSE)) {
      $structured_data['alternateName'] = $alternative_site_name;
    }

    // If metatag has set a cononical URL, add that here too.
    $head_elements = drupal_add_html_head();
    if (!empty($head_elements['metatag_canonical'])) {
      $structured_data['url'] = $head_elements['metatag_canonical']['#value'];
    }

    // Add site logo.
    $structured_data['logo'] = structured_data_get_site_logo();

    // Add local business info.
    $local_data = structured_data_get_local_info();
    $structured_data = array_merge($structured_data, $local_data);

    // Add corporate contact info.
    $corp_data = structured_data_get_corporate_info();
    $structured_data = array_merge($structured_data, $corp_data);
  }

  // If there is any sructured data, add it to the page.
  if (!empty($structured_data)) {
    $json_ld_script = array(
      '#tag' => 'script',
      '#attributes' => array('type' => 'application/ld+json'),
      '#value' => defined('JSON_UNESCAPED_SLASHES') ? json_encode($structured_data, JSON_UNESCAPED_SLASHES) : json_encode($structured_data),
    );
    drupal_add_html_head($json_ld_script, 'structured_data_json_ld');
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function structured_data_form_node_type_form_alter(&$form, &$form_state) {
  $js_path = backdrop_get_path('module', 'structured_data') . '/js/structured_data.admin.js';
  $form['structured_data'] = array(
    '#type' => 'fieldset',
    '#title' => t('Structured data'),
    '#collapsible' => TRUE,
    '#group' => 'additional_settings',
    '#tree' => TRUE,
    '#attributes' => array(
      'class' => array('structured-data'),
    ),
    '#attached' => array(
      'js' => array($js_path),
    ),
  );

  $type = $form['#node_type']; // Nice shorthand.
  $node_types = config_get('structured_data.settings', 'node_types');
  if (!in_array($type->type, $node_types)) {
    $disabled = t('disabled');
    if (user_access('configure structured data')) {
      $disabled = l(t('Disabled'), 'admin/config/structured-data');
    }
    $form['structured_data']['schema'] = array(
      '#type' => 'markup',
      '#markup' => '<p>' . t('Structured data is !disabled for this content type.', array('!disabled' => $disabled)) . '</p>',
    );
  }
  else {
    $config = config('node.type.' . $type->type);
    $structured_data = $config->get('structured_data');
    $schema_type = $structured_data['schema'];

    module_load_include('inc', 'structured_data', 'structured_data.schemas');
    $schemas = structured_data_get_schemas();
    $schema_options = array('' => (' - None - '));
    foreach ($schemas as $s_name => $s_type) {
      if (!isset($s_type['hidden']) || (isset($s_type['hidden']) && $s_type['hidden'] == TRUE)) {
        $schema_options[$s_name] = $s_type['name'];
      }
    }
    $form['structured_data']['schema'] = array(
      '#type' => 'select',
      '#title' => t('Schema.org data type'),
      '#options' => $schema_options,
      '#default_value' => $schema_type,
      //'#ajax' => structured_data_schema_select(), // @todo make this ajaxy!
    );

    $form['structured_data']['properties'] = array(
      '#type' => 'fieldset',
      '#title' => t('Properties'),
      '#description' => t('Select a schema (above) to see associated properties.'),
    );

    // Get all the fields for this node type.
    $date_source_options = array(
      '' => t('- none -'),
      'node_created' => t('Created date'),
      'node_changed' => t('Updated date'),
    );
    $text_source_options = array(
      '' => t('- none -'),
      'node_title' => t('!title (content title)', array('!title' => check_plain($config->get('title_label')))),
    );
    $person_source_options = array(
      '' => t('- none -'),
      'node_author' => t('Account that authored the content'),
    );
    $org_source_options = array(
      '' => t('- none -'),
      'site' => t('This website'),
    );
    $image_source_options = array(
      '' => t('- none -'),
    );
    $duration_source_options = array(
      '' => t('- none -'),
    );

    // Add fields from this node type to available data sources.
    foreach (field_info_instances('node', $type->type) as $field_name => $value) {
      // Load all field info.
      $field_info = field_info_field($field_name);
      $field_instance = field_info_instance('node', $field_name, $type->type);

      if ($field_info['module'] == 'text') {
        $text_source_options[$field_info['field_name']] = $field_instance['label'];
      }
      elseif ($field_info['type'] == 'image') {
        $image_source_options[$field_info['field_name']] = $field_instance['label'];
      }
      elseif ($field_info['module'] == 'number') {
        $duration_source_options[$field_info['field_name']] = $field_instance['label'];
      }
      elseif ($field_info['module'] == 'taxonomy') {
        $text_source_options[$field_info['field_name']] = $field_instance['label'];
      }
      elseif ($field_info['module'] == 'reference') {
        $text_source_options[$field_info['field_name']] = $field_instance['label'];
      }
    }

    // Map the field data to structured data.
    foreach ($schemas[$schema_type]['properties'] as $property => $property_info) {
      $source_options = array();
      foreach ($property_info['type'] as $type) {
        switch ($type) {
          case 'Text':
            $source_options += $text_source_options;
            break;
          case 'ImageObject':
            $source_options += $image_source_options;
            break;
          case 'DateTime':
            $source_options += $date_source_options;
            break;
          case 'Person':
            $source_options += $person_source_options;
            break;
          case 'Organization':
            $source_options += $org_source_options;
            break;
          case 'Duration':
            $source_options += $duration_source_options;
            break;
        }
      }

      if (empty($source_options)) {
        $source_options = array('' => t('- none -'));
      }

      $form['structured_data']['properties'][$property] = array(
        '#type' => 'select',
        '#title' => t('!property data source', array('!property' => $property_info['name'])),
        '#description' => t($property_info['description']),
        '#options' => $source_options,
        '#default_value' => $structured_data['properties'][$property],
      );
      if ($property_info['required']) {
        $form['structured_data']['properties'][$property]['#required'] = TRUE;
        $form['structured_data']['properties'][$property]['#weight'] = '-1';
      }

      //dpm($property . ' - ' . $property_info['type']);
      //dpm($form['structured_data']['properties'][$property]['#options']);
    }

    // Add a custom submit handler.
    $form['#submit'][] = 'structured_data_form_node_type_form_submit';
  }
}

/**
 * Submit hanlder for the node_type_form.
 */
function structured_data_form_node_type_form_submit($form, &$form_state) {
  // Save the Strucured Data settings into node type config.
  $config = config('node.type.' . $form_state['values']['type']);
  $config->set('structured_data', $form_state['values']['structured_data']);
  $config->save();
}

/******************************************************************************
 * Helper functions.
 ******************************************************************************/

/**
 * Gets only the site name.
 *
 * @return (string) Site name.
 */
function structured_data_get_site_name() {
  // Get the site name.
  if ($custom_name = config_get('structured_data.settings', 'site_name_custom')) {
    $site_name = $custom_name;
  }
  else {
    $site_name = config_get('system.core', 'site_name');
  }

  return $site_name;
}

/**
 * Gets the a URL to the site logo.
 *
 * @return (string) Path to a suitable logo file.
 */
function structured_data_get_site_logo() {
  if ($custom_logo = config_get('structured_data.settings', 'site_logo_custom')) {
    if ($logo = file_load($custom_logo)) {
      $logo_path = file_create_url($logo->uri);
    }
  }
  else {
    $default_theme = config_get('system.core', 'theme_default');
    $logo_path = theme_get_setting('logo', $default_theme);
  }

  return $logo_path;
}

/**
 * Gets the local business data.
 *
 * @return (array) Data matching schema.org definition for address.
 */
function structured_data_get_local_info() {
  $config = config('structured_data.settings');
  $data = array(
    'address' => array('@type' => 'PostalAddress'),
  );

  // Address parts are grouped together.
  if ($address = $config->get('address', FALSE)) {
    $data['address']['streetAddress'] = $address;
  }
  if ($city = $config->get('city', FALSE)) {
    $data['address']['addressLocality'] = $city;
  }
  if ($state = $config->get('state', FALSE)) {
    $data['address']['addressRegion'] = $state;
  }
  if ($zip = $config->get('zip', FALSE)) {
    $data['address']['postalCode'] = $zip;
  }

  return $data;
}

/**
 * Gets the corporate contact data.
 *
 * @return (array) Data matching schema.org definition for contactPoint.
 */
function structured_data_get_corporate_info() {
  $config = config('structured_data.settings');
  $data = array();
  // Only add a contact point if a phone number is provided.
  if ($phone = $config->get('phone', FALSE)) {
    $data['contactPoint'] = array(
      '@type' => 'ContactPoint',
      'telephone' => $phone,
    );
    if ($phone_type = $config->get('phone_type', FALSE)) {
      $data['contactPoint']['contactType'] = $phone_type;
    }
    $phone_options = $config->get('phone_options', array());
    // Remove options not selected, get only values.
    $options = array_values(array_filter($phone_options));
    if (count($options)) {
      $data['contactPoint']['contactOption'] = $options;
    }
  }

  return $data;
}

/**
 * Gets the node-related structured data.
 */
function structured_data_get_node_info($node) {
  $data = array();

  // Only add the structured data if the node type is enabled.
  $config = config('structured_data.settings');
  $enabled_types = $config->get('node_types');
  if (in_array($node->type, $enabled_types)) {

    // Get the schema type.
    $structured_data = config_get('node.type.' . $node->type, 'structured_data');
    $data['@type'] = $structured_data['schema'];

    // Load the schema.
    module_load_include('inc', 'structured_data', 'structured_data.schemas');
    $schema = structured_data_get_schemas($data['@type']);

    foreach ($schema['properties'] as $property => $property_info) {
      if ($field = $structured_data['properties'][$property]) {

        // Special handling for publisher.
        if ($property == 'publisher') {
          $data[$property] = array(
            '@type' => 'Organization',
            'name' => structured_data_get_site_name(),
          );
          if ($logo_path = structured_data_get_site_logo()) {
            $size = getimagesize($logo_path);
            $data[$property]['logo'] = array(
              '@type' => 'ImageObject',
              'url' => $logo_path,
              'width' => $size[0],
              'height' => $size[1],
            );
          }
        }

        // Special handling for node property data.
        elseif (substr($field, 0, 5) == 'node_') {
          $field = str_replace('node_', '', $field);
          if (property_exists($node, $field)) {
            if ($field == 'title') {
              $fieldname = str_replace('node_', '', $field);
              $data[$property] = $node->{$field};
            }
            elseif ($field == 'created' || $field == 'changed') {
              $data[$property] = format_date($node->{$field}, 'custom', 'Y-m-d\TH:i:s');
            }
            elseif ($field == 'author') {
              $acount = user_load($node->nid);
              $data[$property] = array(
                '@type' => 'Person',
                'name' => $acount->name,
              );
            }
          }
        }

        // Handle taxonomy field data.
        elseif (substr($field, 0, 9) == 'taxonomy_') {
          // Take only the first taxonomy term since only one value is allowed.
          if (array_key_exists('target_id', $node->{$field}[$node->langcode][0])) {
            $tid = $node->{$field}[$node->langcode][0]['target_id'];
            $term_name = db_query("SELECT name FROM {taxonomy_term_data} WHERE tid = :tid",
              array(':tid' => $tid))->fetchField();
            $data[$property] = filter_xss($term_name);
          }
        }

        // Handle field module data.
        elseif (substr($field, 0, 6) == 'field_') {
          // Get the field type.
          $field_info = field_info_field($field);

          switch ($field_info['module']) {
            case 'image':
              if (array_key_exists('uri', $node->{$field}[$node->langcode][0])) {
                $image_path = file_create_url($node->{$field}[$node->langcode][0]['uri']);
                $size = getimagesize($image_path);
                $data[$property] = array(
                  '@type' => 'ImageObject',
                  'url' => $image_path,
                  'width' => $size[0],
                  'height' => $size[1],
                );
              }
              break;

            case 'number':
              if (array_key_exists('value', $node->{$field}[$node->langcode][0])) {
                $schema_type = reset($property_info['type']);
                if (in_array($property, array('prepTime', 'cookTime', 'totalTime'))) {
                  $value = $node->{$field}[$node->langcode][0]['value'];
                  $data[$property] = 'PT' . $value . 'M';
                }
                // @todo Other numbers?
              }
              break;

            default: // text module
              if (array_key_exists('value', $node->{$field}[$node->langcode][0])) {
                $data[$property] = filter_xss(strip_tags($node->{$field}[$node->langcode][0]['value']));
              }
              break;
          }
        }

        // Handle body field.
        elseif ($field == 'body') {
          if (array_key_exists('value', $node->{$field}[$node->langcode][0])) {
            $data[$property] = filter_xss(strip_tags($node->{$field}[$node->langcode][0]['value']));
          }
        }
      }
    } // foreach $property_info
  } // if enabled node type

  return $data;
}

/**
 * Helper function: Gets default schema values.
 */
function structured_data_schema_default() {
  return array(
    'schema' => 'Article',
  );
}
