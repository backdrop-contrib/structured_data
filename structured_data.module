<?php
/**
 * @file
 * Annotate your content to generate Rich Search Snippets.
 */

/**
 * Implements hook_permission().
 */
function structured_data_permission() {
  return array(
    'configure structured data' =>  array(
      'title' => t('Configure structured data'),
      'description' => t('Determine which elements should be included in Rich Snippits.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function structured_data_menu() {
  $items['admin/config/structured-data'] = array(
    'title' => 'Structured data',
    'description' => 'The main configuration page for Structured Data',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('structured_data_settings_form'),
    'access arguments' => array('configure structured data'),
    'file' => 'structured_data.admin.inc',
  );

  return $items;
}

/**
 * Implements template_preprocess_html().
 *
 * Add the necesarry json-ld to the page header.
 */
function structured_data_preprocess_html(&$vars) {
  // Can we assume every website is just a website?
  $structured_data = array(
    '@context' => 'http://schema.org',
    '@type' => 'WebSite',
  );

  // Check for Current Node.
  $node = menu_get_object();
  if (!isset($node) && arg(0) == 'node' && is_numeric(arg(1)) && !arg(2)) {
    $node = node_load(arg(1));
  }
  if (isset($node)) {
    // Add node specific info.
    $node_data = structured_data_get_node_info($node);
    $structured_data = array_merge($structured_data, $node_data);
  }
  else {
    // Override type if a business type was selected.
    if ($schema_type = variable_get('structured_data_business_type', FALSE)) {
      $data['@type'] = $schema_type;
    }

    // Add site name info.
    $structured_data['name'] = structured_data_get_site_name();
    // Get the alternative site name.
    if ($alternative_site_name = variable_get('structured_data_site_name_alternative', FALSE)) {
      $structured_data['alternateName'] = $alternative_site_name;
    }

    // If metatag has set a cononical URL, add that here too.
    $head_elements = drupal_add_html_head();
    if (!empty($head_elements['metatag_canonical'])) {
      $structured_data['url'] = $head_elements['metatag_canonical']['#value'];
    }

    // Add site logo.
    $structured_data['logo'] = structured_data_get_site_logo();

    // Add local business info.
    $local_data = structured_data_get_local_info();
    $structured_data = array_merge($structured_data, $local_data);

    // Add corporate contact info.
    $corp_data = structured_data_get_corporate_info();
    $structured_data = array_merge($structured_data, $corp_data);
  }

  // If there is any sructured data, add it to the page.
  if (!empty($structured_data)) {
    $json_ld_script = array(
      '#tag' => 'script',
      '#attributes' => array('type' => 'application/ld+json'),
      '#value' => defined('JSON_UNESCAPED_SLASHES') ? json_encode($structured_data, JSON_UNESCAPED_SLASHES) : json_encode($structured_data),
    );
    drupal_add_html_head($json_ld_script, 'structured_data_json_ld');
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function structured_data_form_node_type_form_alter(&$form, &$form_state) {
  $form['structured_data'] = array(
    '#type' => 'fieldset',
    '#title' => t('Structured data'),
    '#collapsible' => TRUE,
    '#group' => 'additional_settings',
  );

  $type = $form['#node_type']; // Nice shorthand.
  $node_types = variable_get('structured_data_node_types', array());
  if (!in_array($type->type, $node_types)) {
    $disabled = t('disabled');
    if (user_access('configure structured data')) {
      $disabled = l(t('disabled'), 'admin/config/structured-data');
    }
    $form['structured_data']['structured_data_schema'] = array(
      '#type' => 'markup',
      '#markup' => '<p>' . t('Structured data is !disabled for this content type.', array('!disabled' => $disabled)) . '</p>',
    );
  }
  else {
    module_load_include('inc', 'structured_data', 'structured_data.schemas');
    $schemas = structured_data_get_schemas();
    $schema_options = array('' => (' - None - '));
    foreach ($schemas as $s_name => $s_type) {
      if (!$s_type['hidden']) {
        $schema_options[$s_name] = $s_type['name'];
      }
    }
    $form['structured_data']['structured_data_schema'] = array(
      '#type' => 'select',
      '#title' => t('Schema.org type'),
      '#options' => $schema_options,
      '#default_value' => variable_get('structured_data_schema_' . $type->type, ''),
      //'#ajax' => structured_data_schema_select(), // @todo make this ajaxy!
    );

    $form['structured_data']['structured_data_properties'] = array(
      '#type' => 'fieldset',
      '#title' => t('Properties'),
      '#description' => t('Please select a schema (above) to see associated properties (below).'),
    );

    // Get all the fields for this node type.
    $date_source_options = array(
      '' => t('- none -'),
      'created' => t('Created date'),
      'changed' => t('Updated date'),
    );
    $person_source_options = array(
      '' => t('- none -'),
      'name' => t('User account that authored the content'),
    );
    $org_source_options = array(
      '' => t('- none -'),
      'site' => t('This website'),
    );
    $text_source_options = array(
      '' => t('- none -'),
      'title' => t('!title (node title)', array('!title' => check_plain(variable_get('title_label_' . $type->type, 'Title')))),
    );
    $image_source_options = array(
      '' => t('- none -'),
    );
    $fields_info = field_info_instances('node', $type->type);
    foreach ($fields_info as $field_name => $value) {
      $field_info = field_info_field($field_name);
      if ($field_info['module'] == 'text') {
        $text_source_options[$field_info['field_name']] = $field_info['field_name'];
      }
      elseif ($field_info['type'] == 'image') {
        $image_source_options[$field_info['field_name']] = $field_info['field_name'];
      }
    }

    // Get the schema type.
    $schema_type = variable_get('structured_data_schema_' . $type->type, 'Article');

    // Map the field data to REQUIRED structured data.
    foreach ($schemas[$schema_type]['required'] as $property => $property_info) {
      switch ($property_info['type']) {
        case 'text':
          $source_options = $text_source_options;
          break;
        case 'ImageObject':
          $source_options = $image_source_options;
          break;
        case 'DateTime':
          $source_options = $date_source_options;
          break;
        case 'Person':
          $source_options = $person_source_options;
          break;
        case 'Organization':
          $source_options = $org_source_options;
          break;
        default:
          $source_options = array('' => t('- none -'));
          break;
      }

      $form['structured_data']['structured_data_properties']['structured_data_fields_' . $property] = array(
        '#type' => 'select',
        '#title' => t('!property data source', array('!property' => $property_info['name'])),
        '#description' => t($property_info['description']),
        '#options' => $source_options,
        '#default_value' => variable_get('structured_data_fields_' . $property . '_' . $type->type, ''),
        '#required' => TRUE,
      );
    }

    // Map the field data to RECOMMENDED structured data.
    foreach ($schemas[$schema_type]['recommended'] as $property => $property_info) {
      switch ($property_info['type']) {
        case 'text':
          $source_options = $text_source_options;
          break;
        case 'ImageObject':
          $source_options = $image_source_options;
          break;
        case 'DateTime':
          $source_options = $date_source_options;
          break;
        case 'Person':
          $source_options = $person_source_options;
          break;
        case 'Organization':
          $source_options = $org_source_options;
          break;
        default:
          $source_options = array('' => t('- none -'));
          break;
      }

      $form['structured_data']['structured_data_properties']['structured_data_rec_fields_' . $property] = array(
        '#type' => 'select',
        '#title' => t('!property data source', array('!property' => $property_info['name'])),
        '#description' => t($property_info['description']),
        '#options' => $source_options,
        '#default_value' => variable_get('structured_data_rec_fields_' . $property . '_' . $type->type, ''),
      );
    }
  }
}

/******************************************************************************
 * Helper functions.
 ******************************************************************************/

/**
 * Gets only the site name.
 *
 * @return (string) Site name.
 */
function structured_data_get_site_name() {
  // Get the site name.
  if ($custom_name = variable_get('structured_data_site_name_custom', FALSE)) {
    $site_name = $custom_name;
  }
  else {
    $site_name = variable_get('site_name', '');
  }

  return $site_name;
}

/**
 * Gets the a URL to the site logo.
 *
 * @return (string) Path to a suitable logo file.
 */
function structured_data_get_site_logo() {
  if ($custom_logo = variable_get('structured_data_site_logo_custom', FALSE)) {
    if ($logo = file_load($custom_logo)) {
      $logo_path = file_create_url($logo->uri);
    }
  }
  else {
    $default_theme = variable_get('theme_default', 'bartik');
    $logo_path = theme_get_setting('logo', $default_theme);
  }

  return $logo_path;
}

/**
 * Gets the local business data.
 *
 * @return (array) Data matching schema.org definition for address.
 */
function structured_data_get_local_info() {
  $data = array(
    'address' => array('@type' => 'PostalAddress'),
  );

  // Address parts are grouped together.
  if ($address = variable_get('structured_data_address', FALSE)) {
    $data['address']['streetAddress'] = $address;
  }
  if ($city = variable_get('structured_data_city', FALSE)) {
    $data['address']['addressLocality'] = $city;
  }
  if ($state = variable_get('structured_data_state', FALSE)) {
    $data['address']['addressRegion'] = $state;
  }
  if ($zip = variable_get('structured_data_zip', FALSE)) {
    $data['address']['postalCode'] = $zip;
  }

  return $data;
}

/**
 * Gets the corporate contact data.
 *
 * @return (array) Data matching schema.org definition for contactPoint.
 */
function structured_data_get_corporate_info() {
  $data = array();
  // Only add a contact point if a phone number is provided.
  if ($phone = variable_get('structured_data_phone', FALSE)) {
    $data['contactPoint'] = array(
      '@type' => 'ContactPoint',
      'telephone' => $phone,
    );
    if ($phone_type = variable_get('structured_data_phone_type', FALSE)) {
      $data['contactPoint']['contactType'] = $phone_type;
    }
    $phone_options = variable_get('structured_data_phone_options', array());
    // Remove options not selected, get only values.
    $options = array_values(array_filter($phone_options));
    if (count($options)) {
      $data['contactPoint']['contactOption'] = $options;
    }
  }

  return $data;
}

/**
 * Gets the node-related structured data.
 */
function structured_data_get_node_info($node) {
  $data = array();
  // Only add the structured data if the node type is enabled.
  $enabled_types = array_filter(variable_get('structured_data_node_types', array()));
  if (in_array($node->type, $enabled_types)) {
    // Get the schema type.
    $data['@type'] = variable_get('structured_data_schema_' . $node->type, 'Article');
    // Load the schema.
    module_load_include('inc', 'structured_data', 'structured_data.schemas');
    $schema = structured_data_get_schemas($data['@type']);
    $properties = array_merge($schema['required'], $schema['recommended']);
    foreach ($properties as $property => $property_info) {
      $field = variable_get('structured_data_fields_' . $property . '_' . $node->type, FALSE);
      if (!$field){
        $field = variable_get('structured_data_rec_fields_' . $property . '_' . $node->type, FALSE);
      }
      if ($field) {
        if ($property == 'publisher') {
          $logo_path = structured_data_get_site_logo();
          $size = getimagesize($logo_path);
          $data[$property] = array(
            '@type' => 'Organization',
            'name' => structured_data_get_site_name(),
            'logo' => array(
              '@type' => 'ImageObject',
              'url' => $logo_path,
              'width' => $size[0],
              'height' => $size[1],
            ),
          );
        }
        elseif (property_exists($node, $field) && !empty($node->{$field}[$node->language])) {
          // Special case the non-fields.
          if ($field == 'title') {
            $data[$property] = $node->{$field};
          }
          elseif ($field == 'name') {
            $data[$property] = array(
              '@type' => 'Person',
              'name' => $node->{$field},
            );
          }
          elseif ($field == 'created' || $field == 'changed') {
            $data[$property] = format_date($node->{$field}, 'custom', 'Y-m-d\TH:i:s');
          }
          // Switch the fields based on type.
          else {
            switch ($property_info['type']) {
              case 'ImageObject':
                $image_path = file_create_url($node->{$field}[$node->language][0]['uri']);
                $size = getimagesize($image_path);
                $data[$property] = array(
                  '@type' => 'ImageObject',
                  'url' => $image_path,
                  'width' => $size[0],
                  'height' => $size[1],
                );
                break;

              default:
                // Lets treat them all as text unless they need special treatment.
                $data[$property] = check_plain(strip_tags($node->{$field}[$node->language][0]['value']));
                break;
            }
          }
        }
      }
    }
  }
dpm($data);
  return $data;
}
